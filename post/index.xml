<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on A Polyglot&#39;s Hacks</title>
    <link>https://lbarasti.com/post/</link>
    <description>Recent content in Posts on A Polyglot&#39;s Hacks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 25 Nov 2019 22:12:33 +0100</lastBuildDate>
    
	<atom:link href="https://lbarasti.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2-way communication between Fibers</title>
      <link>https://lbarasti.com/post/two_way_comm_between_fibers/</link>
      <pubDate>Mon, 25 Nov 2019 22:12:33 +0100</pubDate>
      
      <guid>https://lbarasti.com/post/two_way_comm_between_fibers/</guid>
      <description>Introduction If you&#39;re writing concurrent code in Crystal, chances are you&#39;re relying on Channels to pass information between Fibers. This works very well when dealing with one-way communication - i.e. when the information flows in one direction only - but probably leaves you wondering how to pass information back and forth between fibers.
In this article, we show a simple pattern to achieve two-way communication between fibers, and then iterate over it, to make it more user-friendly.</description>
    </item>
    
    <item>
      <title>Going faster with Crystal</title>
      <link>https://lbarasti.com/post/fun_with_crystal/</link>
      <pubDate>Wed, 12 Apr 2017 10:12:33 +0100</pubDate>
      
      <guid>https://lbarasti.com/post/fun_with_crystal/</guid>
      <description>Recently, I have been having some fun with the algorithmic challenges from one of the Algorithms courses on Coursera. The programming language I like to use for this kind of things is ruby.
When designing an algorithm it&#39;s important for me to understand why brute force doesn&#39;t work. I like to count the reasons why that approach is not feasible. One way of doing that is to write a na√Øve implementation of the algorithm under study and make considerations about its running time.</description>
    </item>
    
  </channel>
</rss>
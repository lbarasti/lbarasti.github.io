<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ruby on A Polyglot&#39;s Hacks</title>
    <link>https://lbarasti.com/tags/ruby/</link>
    <description>Recent content in ruby on A Polyglot&#39;s Hacks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 12 Apr 2017 10:12:33 +0100</lastBuildDate>
    
	<atom:link href="https://lbarasti.com/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Going faster with Crystal</title>
      <link>https://lbarasti.com/post/fun_with_crystal/</link>
      <pubDate>Wed, 12 Apr 2017 10:12:33 +0100</pubDate>
      
      <guid>https://lbarasti.com/post/fun_with_crystal/</guid>
      <description>Recently, I have been having some fun with the algorithmic challenges from one of the Algorithms courses on Coursera. The programming language I like to use for this kind of things is ruby.
When designing an algorithm it&#39;s important for me to understand why brute force doesn&#39;t work. I like to count the reasons why that approach is not feasible. One way of doing that is to write a na√Øve implementation of the algorithm under study and make considerations about its running time.</description>
    </item>
    
  </channel>
</rss>